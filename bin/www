#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('Ticketing_System:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '2000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

var io = require('socket.io').listen(server);

//*****io.sockets -> from server to client & connection
//*****socket -> from client to server

// io.sockets.on('connection', function (socket) {
//   socket.on("update-schedules", function () {
//     socket.emit("update-schedules1");
//   });
  
io.on('connection', function (socket) {
   
  socket.on('update-schedules', function (data) {
    //data = JSON.parse(data);
    // var static = data.static;
    // var team1 = data.selected.team1;
    // var team2 = data.selected.team2;
    // var stadium = data.selected.stadium;
    // var sched = {
    //   _id: static._id,
    //   datetime: static.date + ' ' + static.time,
    //   stadium:{
    //     capacity: stadium.capacity,
    //     image: stadium.image,
    //     location: stadium.location,
    //     name: stadium.name
    //   },
    //   teams:[
    //     {
    //       imgurl: team1.imgurl,
    //       name: team1.name,
    //       nickname: team1.nickname,
    //       stadium:{
    //         capacity: team1.capacity,
    //         image: team1.image,
    //         location: team1.location,
    //         name: team1.name}
    //     },
    //     {
    //       imgurl: team2.imgurl,
    //       name: team2.name,
    //       nickname: team2.nickname,
    //       stadium:{
    //         capacity: team2.capacity,
    //         image: team2.image,
    //         location: team2.location,
    //         name: team2.name}
    //     }
    //   ],
    //   week: static.week
    // }
    io.emit("update-schedules", data);
  });
  
  socket.on('disconnect', function () {
    io.emit('user disconnected');
  });
});
  
  
// });


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
